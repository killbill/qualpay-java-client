/*
 * Qualpay Platform API
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import qpPlatform.ApiException;
import io.swagger.client.model.AddAppRequest;
import io.swagger.client.model.BrowseAppsResult;
import io.swagger.client.model.BrowseSalesRepsResult;
import java.io.File;
import io.swagger.client.model.GetAppResult;
import io.swagger.client.model.QPApiResponse;
import io.swagger.client.model.SaveDataRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ApplicationBoardingApi
 */
@Ignore
public class ApplicationBoardingApiTest {

    private final ApplicationBoardingApi api = new ApplicationBoardingApi();

    
    /**
     * Create Application
     *
     * Creates a new merchant application, returning the new application&#39;s ID as well as the pricing options available.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addAppTest() throws ApiException {
        AddAppRequest body = null;
        GetAppResult response = api.addApp(body);

        // TODO: test validations
    }
    
    /**
     * Browse applications
     *
     * Retrieves an array of Applications. Optional query parameters determine the page size and sorting of the data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void browseAppsTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        BrowseAppsResult response = api.browseApps(count, orderOn, orderBy, page, filter);

        // TODO: test validations
    }
    
    /**
     * Browse Sales Reps
     *
     * Retrieves an array of Users who can be used during the creation of an application to identify the sales representitive. Optional query parameters determine the page size and sorting of the data.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void browseSalesRepsTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        BrowseSalesRepsResult response = api.browseSalesReps(count, orderOn, orderBy, page, filter);

        // TODO: test validations
    }
    
    /**
     * Email Application
     *
     * Emails an application to the business contact for click-through agreement. The business_contact_email must be pre-populated before calling this service.  If present, the business_contact_name will be used to adress the recipient in the email.  An application otherwise does not have to pass validation in order to be emailed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void emailAppTest() throws ApiException {
        Long appId = null;
        QPApiResponse response = api.emailApp(appId);

        // TODO: test validations
    }
    
    /**
     * Get Application
     *
     * Retrieve an application&#39;s details and available pricing.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAppTest() throws ApiException {
        Long appId = null;
        GetAppResult response = api.getApp(appId);

        // TODO: test validations
    }
    
    /**
     * Save Data
     *
     * Saves one or more data fields to a new merchant application.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void saveDataTest() throws ApiException {
        Long appId = null;
        SaveDataRequest body = null;
        QPApiResponse response = api.saveData(appId, body);

        // TODO: test validations
    }
    
    /**
     * Upload Document
     *
     * Uploads a document relevant to this application to the provided bucket.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void uploadFileTest() throws ApiException {
        Long appId = null;
        File file = null;
        String bucket = null;
        String label = null;
        QPApiResponse response = api.uploadFile(appId, file, bucket, label);

        // TODO: test validations
    }
    
    /**
     * Validate Application
     *
     * All data fields in an application are validated, including dependencies they may have between eachother. An application can not be submitted until it passes validation.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void validateAppTest() throws ApiException {
        Long appId = null;
        QPApiResponse response = api.validateApp(appId);

        // TODO: test validations
    }
    
}
