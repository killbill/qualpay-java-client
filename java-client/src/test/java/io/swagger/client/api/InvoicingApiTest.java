/*
 * Qualpay Platform API
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import qpPlatform.ApiException;
import io.swagger.client.model.CopyInvoiceRequest;
import io.swagger.client.model.CreateInvoiceRequest;
import io.swagger.client.model.InvoiceBouncedResponse;
import io.swagger.client.model.InvoiceListResponse;
import io.swagger.client.model.InvoicePaymentListResponse;
import io.swagger.client.model.InvoicePaymentRequest;
import io.swagger.client.model.InvoicePaymentResponse;
import io.swagger.client.model.InvoiceResponse;
import io.swagger.client.model.QPApiResponse;
import io.swagger.client.model.ResendInvoiceRequest;
import io.swagger.client.model.SendInvoiceRequest;
import io.swagger.client.model.UpdateDraftRequest;
import io.swagger.client.model.UpdateOutstandingRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for InvoicingApi
 */
@Ignore
public class InvoicingApiTest {

    private final InvoicingApi api = new InvoicingApi();

    
    /**
     * Add Payment to an Invoice
     *
     * Adds a payment to an invoice. A check or cash payment can be added to a saved or outstanding invoice. Credit card payments cannot be added manually to an invoice. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addInvoicePaymentTest() throws ApiException {
        Long invoiceId = null;
        InvoicePaymentRequest body = null;
        InvoicePaymentResponse response = api.addInvoicePayment(invoiceId, body);

        // TODO: test validations
    }
    
    /**
     * Get Undelivered Invoices
     *
     * Browse all undelivered invoices. Optional query parameters determines, size and sort order of returned array.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void browseBouncedInvoicesTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        InvoiceBouncedResponse response = api.browseBouncedInvoices(count, orderOn, orderBy, page, filter);

        // TODO: test validations
    }
    
    /**
     * Get Invoice Payments
     *
     * Browse all invoice payments. Optional query parameters determines, size and sort order of returned array.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void browseInvoicePaymentsTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        InvoicePaymentListResponse response = api.browseInvoicePayments(count, orderOn, orderBy, page, filter);

        // TODO: test validations
    }
    
    /**
     * Get invoice payments by id
     *
     * Browse all invoice payments made to an invoice. Optional query parameters determines, size and sort order of returned array.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void browseInvoicePaymentsByIdTest() throws ApiException {
        Long invoiceId = null;
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        InvoicePaymentListResponse response = api.browseInvoicePaymentsById(invoiceId, count, orderOn, orderBy, page, filter);

        // TODO: test validations
    }
    
    /**
     * Get all Invoices
     *
     * Gets an array of invoice objects. Optional query parameters determines, size and sort order of returned array.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void browseInvoicesTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        InvoiceListResponse response = api.browseInvoices(count, orderOn, orderBy, page, filter);

        // TODO: test validations
    }
    
    /**
     * Cancel an Invoice
     *
     * Cancels an invoice. A canceled invoice cannot be edited. If your customer clicks on the pay now button in the invoice e-mail an error message will be displayed.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelInvoiceTest() throws ApiException {
        Long invoiceId = null;
        InvoiceResponse response = api.cancelInvoice(invoiceId);

        // TODO: test validations
    }
    
    /**
     * Copy an Invoice
     *
     * Makes a copy of an invoice. The invoice date will be set to today&#39;s date and due date will be adjusted based on the invoice date and the payment terms. Optionally, include an invoice_number in the POST body to make a copy of the invoice with a different invoice number. Invoice payments from the original invoice will not be copied. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void copyInvoiceTest() throws ApiException {
        Long invoiceId = null;
        CopyInvoiceRequest body = null;
        InvoiceResponse response = api.copyInvoice(invoiceId, body);

        // TODO: test validations
    }
    
    /**
     * Create an invoice
     *
     * Creates a draft invoice that you can send later using the Send Invoice API.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createInvoiceTest() throws ApiException {
        CreateInvoiceRequest body = null;
        InvoiceResponse response = api.createInvoice(body);

        // TODO: test validations
    }
    
    /**
     * Get by Invoice ID
     *
     * Gets an invoice by invoice_id.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getInvoiceTest() throws ApiException {
        Long invoiceId = null;
        InvoiceResponse response = api.getInvoice(invoiceId);

        // TODO: test validations
    }
    
    /**
     * Remove an Invoice Payment
     *
     * Removes an invoice payment. A payment can be removed on a saved or an outstanding invoice. CARD type payments cannot be removed. Payments made via a credit card cannot be removed. Payments can be deleted only from SAVED or OUTSTANDING invoices.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeInvoicePaymentTest() throws ApiException {
        Long invoiceId = null;
        Long paymentId = null;
        QPApiResponse response = api.removeInvoicePayment(invoiceId, paymentId);

        // TODO: test validations
    }
    
    /**
     * Resend an Invoice
     *
     * Resends an invoice to the customer. An outstanding or paid invoice can be resent.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resendInvoiceTest() throws ApiException {
        Long invoiceId = null;
        ResendInvoiceRequest body = null;
        QPApiResponse response = api.resendInvoice(invoiceId, body);

        // TODO: test validations
    }
    
    /**
     * Send an Invoice
     *
     * Sends an invoice to the customer. Sending an invoice changes the status of the invoice to outstanding. Once sent, only the from_contact and business_contact of the invoice can be updated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void sendInvoiceTest() throws ApiException {
        Long invoiceId = null;
        SendInvoiceRequest body = null;
        InvoiceResponse response = api.sendInvoice(invoiceId, body);

        // TODO: test validations
    }
    
    /**
     * Update a Draft Invoice
     *
     * Updates a draft invoice. Only the fields that need updating can be sent in the request body. If updating JSON object fields, the complete JSON should be sent in the request body. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateDraftInvoiceTest() throws ApiException {
        Long invoiceId = null;
        UpdateDraftRequest body = null;
        InvoiceResponse response = api.updateDraftInvoice(invoiceId, body);

        // TODO: test validations
    }
    
    /**
     * Update an Invoice Payment
     *
     * Updates an invoice payment. A payment can be updated on a saved or an outstanding invoice. Payments made via credit card using the “Pay Now” button cannot be updated.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateInvoicePaymentTest() throws ApiException {
        Long invoiceId = null;
        Long paymentId = null;
        InvoicePaymentRequest body = null;
        InvoicePaymentResponse response = api.updateInvoicePayment(invoiceId, paymentId, body);

        // TODO: test validations
    }
    
    /**
     * Update an Outstanding Invoice
     *
     * Updates an outstanding invoice. Only the from_contact and business_contact fields can be updated on an outstanding invoice. Only the fields that need updating can be sent in the request body. If updating JSON object fields, the complete JSON should be sent in the request body. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateOutstandingInvoiceTest() throws ApiException {
        Long invoiceId = null;
        UpdateOutstandingRequest body = null;
        InvoiceResponse response = api.updateOutstandingInvoice(invoiceId, body);

        // TODO: test validations
    }
    
}
