/*
 * Qualpay Platform API
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import qpPlatform.ApiException;
import io.swagger.client.model.AccountUpdaterResponse;
import io.swagger.client.model.AccountUpdaterSummaryResponse;
import io.swagger.client.model.BatchResponse;
import io.swagger.client.model.DepositResponse;
import io.swagger.client.model.DisputeResponse;
import io.swagger.client.model.PGTransactionResponse;
import io.swagger.client.model.QPApiResponse;
import io.swagger.client.model.SettledTransactionResponse;
import io.swagger.client.model.StatementDisputeResponse;
import io.swagger.client.model.StatementFeeResponse;
import io.swagger.client.model.StatementPlanResponse;
import io.swagger.client.model.StatementReserveResponse;
import io.swagger.client.model.StatementSettlementResponse;
import io.swagger.client.model.TransactionRequestResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ReportingApi
 */
@Ignore
public class ReportingApiTest {

    private final ReportingApi api = new ReportingApi();

    
    /**
     * Account Updater Detail Report
     *
     * Browses a paginated list of Account updater requests
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void browseAusRequestsTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        AccountUpdaterResponse response = api.browseAusRequests(count, orderOn, orderBy, page, filter);

        // TODO: test validations
    }
    
    /**
     * Account Updater Summary Report
     *
     * Browses a paginated list of account updater summary report
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void browseAusSummaryTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        AccountUpdaterSummaryResponse response = api.browseAusSummary(count, orderOn, orderBy, page, filter);

        // TODO: test validations
    }
    
    /**
     * Batch Report
     *
     * Browses a paginated list of merchant batches. These are whole batches which have been settled from the merchant&#39;s POS device, software, or gateway.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void browseBatchesTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        BatchResponse response = api.browseBatches(count, orderOn, orderBy, page, filter);

        // TODO: test validations
    }
    
    /**
     * Deposit Report
     *
     * Browses a paginated list of bank deposits and withdrawls.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void browseDepositsTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        DepositResponse response = api.browseDeposits(count, orderOn, orderBy, page, filter);

        // TODO: test validations
    }
    
    /**
     * Disputes Report
     *
     * Browses a paginated list of disputes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void browseDisputesTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        DisputeResponse response = api.browseDisputes(count, orderOn, orderBy, page, filter);

        // TODO: test validations
    }
    
    /**
     * Statement Dispute Adjustments Data
     *
     * Browses a paginated list of Statement Disputes Adjustment Data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void browseStatementDisputeAdjustmentDataTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        StatementDisputeResponse response = api.browseStatementDisputeAdjustmentData(count, orderOn, orderBy, page, filter);

        // TODO: test validations
    }
    
    /**
     * Statement Fee Data
     *
     * Browses a paginated list of Statement Fee Data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void browseStatementFeeDataTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        StatementFeeResponse response = api.browseStatementFeeData(count, orderOn, orderBy, page, filter);

        // TODO: test validations
    }
    
    /**
     * Statement Plan Type Data
     *
     * Browses a paginated list of Statement Plan Type Summary
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void browseStatementPlanDataTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        StatementPlanResponse response = api.browseStatementPlanData(count, orderOn, orderBy, page, filter);

        // TODO: test validations
    }
    
    /**
     * Statement Reserve Data
     *
     * Browses a paginated list of Statement Reserve Data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void browseStatementReserveDataTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        StatementReserveResponse response = api.browseStatementReserveData(count, orderOn, orderBy, page, filter);

        // TODO: test validations
    }
    
    /**
     * Statement Settlemet Data
     *
     * Browses a paginated list of Statement Settlemet Data
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void browseStatementSettlemetDataTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        StatementSettlementResponse response = api.browseStatementSettlemetData(count, orderOn, orderBy, page, filter);

        // TODO: test validations
    }
    
    /**
     * Settled Transaction Report
     *
     * Browses a paginated list of settled transactions. Some additional text about deposits and stuff.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void browseTransTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        SettledTransactionResponse response = api.browseTrans(count, orderOn, orderBy, page, filter);

        // TODO: test validations
    }
    
    /**
     * Get transaction by PG ID
     *
     * Gets a payment gateway transaction by Payment Gateway ID.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionByPgIdTest() throws ApiException {
        String pgId = null;
        PGTransactionResponse response = api.getTransactionByPgId(pgId);

        // TODO: test validations
    }
    
    /**
     * Transaction Report
     *
     * Browses a paginated list of transaction requests
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getTransactionRequestsTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        TransactionRequestResponse response = api.getTransactionRequests(count, orderOn, orderBy, page, filter);

        // TODO: test validations
    }
    
}
