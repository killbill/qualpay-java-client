/*
 * Qualpay Platform API
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import qpPlatform.ApiException;
import io.swagger.client.model.CorrespondingTransactionResponse;
import io.swagger.client.model.DisputeDetail;
import io.swagger.client.model.DisputeResponse;
import java.io.File;
import io.swagger.client.model.QPApiListResponse;
import io.swagger.client.model.QPApiResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for DisputeManagementApi
 */
@Ignore
public class DisputeManagementApiTest {

    private final DisputeManagementApi api = new DisputeManagementApi();

    
    /**
     * Accept Dispute
     *
     * Accept first time Chargeback and Pre-Arbitration Withdraw from Arbitration.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void acceptDisputeTest() throws ApiException {
        Long recId = null;
        QPApiResponse response = api.acceptDispute(recId);

        // TODO: test validations
    }
    
    /**
     * Get Disputes
     *
     * Request all disputes and their detail associated with a vendor or a node.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void browseDisputesTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        DisputeDetail response = api.browseDisputes(count, orderOn, orderBy, page, filter);

        // TODO: test validations
    }
    
    /**
     * Create Dispute Data
     *
     * For testing purposes, create a dispute for a specific reason code or for all the reason codes.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void createDisputeTest() throws ApiException {
        Long merchantId = null;
        String reasonCode = null;
        QPApiListResponse response = api.createDispute(merchantId, reasonCode);

        // TODO: test validations
    }
    
    /**
     * Get Credited Transaction Detail
     *
     * Request the credited transactions associated with dispute.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getCreditedTranTest() throws ApiException {
        Long recId = null;
        CorrespondingTransactionResponse response = api.getCreditedTran(recId);

        // TODO: test validations
    }
    
    /**
     * Get Submitted Dispute Response
     *
     * Get previously submitted dispute response.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getDisputeResponseTest() throws ApiException {
        Long recId = null;
        DisputeResponse response = api.getDisputeResponse(recId);

        // TODO: test validations
    }
    
    /**
     * Get Non Disputed Transaction 
     *
     * Request the non-disputed transactions associated with with dispute.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getNonDisputedTranTest() throws ApiException {
        Long recId = null;
        CorrespondingTransactionResponse response = api.getNonDisputedTran(recId);

        // TODO: test validations
    }
    
    /**
     * Reset Dispute Data
     *
     * For non production enviornment, request to reset a dispute case to new status.For Production, request to reset dispute to new status till a dispute is in Qualpay Review (Status&#x3D;Q).Reset If need to submit different response or want to cancel a rebuttal submitted in error
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resetDisputeTest() throws ApiException {
        Long recId = null;
        QPApiResponse response = api.resetDispute(recId);

        // TODO: test validations
    }
    
    /**
     * Submit Dispute Response
     *
     * Submit dispute responses with supporting documentation. Response options are dynamic and are based on the reason code.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void submitDisputesResponseTest() throws ApiException {
        Long recId = null;
        File file = null;
        String disputeResponse = null;
        QPApiResponse response = api.submitDisputesResponse(recId, file, disputeResponse);

        // TODO: test validations
    }
    
}
