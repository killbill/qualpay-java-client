/*
 * Qualpay Platform API
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import qpPlatform.ApiException;
import io.swagger.client.model.QPApiData;
import io.swagger.client.model.QPApiResponse;
import io.swagger.client.model.Webhook;
import io.swagger.client.model.WebhookEventResponse;
import io.swagger.client.model.WebhookResponse;
import io.swagger.client.model.WebhooksListResponse;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for WebhooksApi
 */
@Ignore
public class WebhooksApiTest {

    private final WebhooksApi api = new WebhooksApi();

    
    /**
     * Add an event
     *
     * Add an event to a webhook. Refer to the Webhook documentation for a list of available events. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addEventTest() throws ApiException {
        Long webhookId = null;
        String event = null;
        QPApiData body = null;
        QPApiResponse response = api.addEvent(webhookId, event, body);

        // TODO: test validations
    }
    
    /**
     * Add webhook
     *
     * Configure a new webhook. Save the webhook_id in the response for use in future requests. Save the generated secret, the secret can be used to validate the webhook. Refer to webhook documentation for secret usage.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addWebhookTest() throws ApiException {
        Webhook body = null;
        WebhookResponse response = api.addWebhook(body);

        // TODO: test validations
    }
    
    /**
     * Browse webhooks
     *
     * Gets an array of webhook objects. Optional query parameters determines, size and sort order of returned array. Filters can be used to filter results. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void browseWebhookTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        WebhooksListResponse response = api.browseWebhook(count, orderOn, orderBy, page, filter);

        // TODO: test validations
    }
    
    /**
     * Disable a Webhook
     *
     * Disable a webhook. Events will not be triggered on a disabled webhook. When disabled, all active requests for this webhook will be held. If the webhook is enabled before a request expires, Qualpay will attempt to post the request again.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void disableWebhookTest() throws ApiException {
        Long webhookId = null;
        QPApiData body = null;
        QPApiResponse response = api.disableWebhook(webhookId, body);

        // TODO: test validations
    }
    
    /**
     * Update webhook
     *
     * Manage a webhook. Once created, the webhook node cannot be modified. Only the fields to be updated can be sent in the request.  When events array is included in the request, all events will be replaced with the events in the request. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void editWebhookTest() throws ApiException {
        Long webhookId = null;
        Webhook body = null;
        QPApiResponse response = api.editWebhook(webhookId, body);

        // TODO: test validations
    }
    
    /**
     * Enable a Webhook
     *
     * Enable a webhook. Events are triggered and requests are posted only for active webhooks. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void enableWebhookTest() throws ApiException {
        Long webhookId = null;
        QPApiData body = null;
        QPApiResponse response = api.enableWebhook(webhookId, body);

        // TODO: test validations
    }
    
    /**
     * Get events
     *
     * Get all events for a webhook. Refer to the Webhook documentation for a list of available events. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getEventsTest() throws ApiException {
        Long webhookId = null;
        WebhookEventResponse response = api.getEvents(webhookId);

        // TODO: test validations
    }
    
    /**
     * Get webhook
     *
     * Gets a webhook.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getWebhookTest() throws ApiException {
        Long webhookId = null;
        WebhookResponse response = api.getWebhook(webhookId);

        // TODO: test validations
    }
    
    /**
     * Delete event
     *
     * Delete an event from a webhook. Refer to the Webhook documentation for a list of available events.  
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void removeEventTest() throws ApiException {
        Long webhookId = null;
        String event = null;
        QPApiResponse response = api.removeEvent(webhookId, event);

        // TODO: test validations
    }
    
}
