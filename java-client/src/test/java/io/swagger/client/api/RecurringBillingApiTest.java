/*
 * Qualpay Platform API
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import qpPlatform.ApiException;
import io.swagger.client.model.AddRecurringPlanRequest;
import io.swagger.client.model.AddSubscriptionRequest;
import io.swagger.client.model.ArchiveRecurringPlanRequest;
import io.swagger.client.model.CancelSubscriptionRequest;
import io.swagger.client.model.PauseSubscriptionRequest;
import io.swagger.client.model.QPApiResponse;
import io.swagger.client.model.RecurringPlanListResponse;
import io.swagger.client.model.RecurringPlanResponse;
import io.swagger.client.model.ResumeSubscriptionRequest;
import io.swagger.client.model.SubscriptionListResponse;
import io.swagger.client.model.SubscriptionResponse;
import io.swagger.client.model.TransactionListResponse;
import io.swagger.client.model.UpdateRecurringPlanRequest;
import io.swagger.client.model.UpdateSubscriptionRequest;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for RecurringBillingApi
 */
@Ignore
public class RecurringBillingApiTest {

    private final RecurringBillingApi api = new RecurringBillingApi();

    
    /**
     * Add a Recurring Plan
     *
     * Adds a new Recurring Plan. Save the generated unique plan_id, which is required to delete a plan. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addPlanTest() throws ApiException {
        AddRecurringPlanRequest body = null;
        RecurringPlanResponse response = api.addPlan(body);

        // TODO: test validations
    }
    
    /**
     * Add a Subscription
     *
     * Creates a new subscription on the specified start date. Returns the subscription_id; save this id to interact with this subscription using the API. When a subscription is added, with a one-time fee, a payment gateway sale request is  made immediately to bill the customer the one-time fee. Check the response in the return model to check the status of the payment gateway request. Note that the subscription remains active even if the payment gateway request for the one-time fee fails. An “off plan” subscription, a subscription without a plan, can be created by excluding the plan_code from your request and sending applicable fields
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void addSubscriptionTest() throws ApiException {
        AddSubscriptionRequest body = null;
        SubscriptionResponse response = api.addSubscription(body);

        // TODO: test validations
    }
    
    /**
     * Archive a Recurring Plan
     *
     * Archives a Plan. Only active plans can be archived. Note that if there are subscribers to this plan, then all subscriptions belonging to this plan will continue to be active. No updates can be made to an archived plan. New subscribers cannot be added to a archived plan. You can always pull up information on an archived plan from the system. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void archivePlanTest() throws ApiException {
        String planCode = null;
        ArchiveRecurringPlanRequest body = null;
        RecurringPlanResponse response = api.archivePlan(planCode, body);

        // TODO: test validations
    }
    
    /**
     * Get all Recurring Plans
     *
     * Gets a paginated list of recurring plans. Optional query parameters determines, size and sort order of returned array
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void browsePlansTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        Long merchantId = null;
        RecurringPlanListResponse response = api.browsePlans(count, orderOn, orderBy, page, filter, merchantId);

        // TODO: test validations
    }
    
    /**
     * Get all Subscriptions
     *
     * Gets an array of subscription objects. Optional query parameters determines, size and sort order of returned array
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void browseSubscriptionsTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        Long merchantId = null;
        SubscriptionListResponse response = api.browseSubscriptions(count, orderOn, orderBy, page, filter, merchantId);

        // TODO: test validations
    }
    
    /**
     * Cancel a Subscription
     *
     * Cancels a subscription. Only active, suspended or paused subscriptions can be cancelled. A cancelled subscription cannot be resumed. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void cancelSubscriptionTest() throws ApiException {
        Long subscriptionId = null;
        CancelSubscriptionRequest body = null;
        SubscriptionResponse response = api.cancelSubscription(subscriptionId, body);

        // TODO: test validations
    }
    
    /**
     * Delete a Recurring Plan
     *
     * Deletes a Plan. Any plan, active or not can be deleted. If there are subscribers to the plan, then all subscriptions related to this plan will be cancelled. A deleted plan cannot be updated, neither can new subscrbers be added to a deleted plan. Even if a plan is deleted, you can query the system to get information about the deleted plan. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void deletePlanTest() throws ApiException {
        Long planId = null;
        Long merchantId = null;
        RecurringPlanResponse response = api.deletePlan(planId, merchantId);

        // TODO: test validations
    }
    
    /**
     * Get all subscription transactions
     *
     * Gets all subscription transactions. Optional Parameters will help filter and restrict the result. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getAllSubscriptionTransactionsTest() throws ApiException {
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        Long merchantId = null;
        TransactionListResponse response = api.getAllSubscriptionTransactions(count, orderOn, orderBy, page, filter, merchantId);

        // TODO: test validations
    }
    
    /**
     * Find Recurring Plan by Plan Code
     *
     * Returns a list of recurring plans for the plan_code. Search result includes active, archived and deleted plans. Optional query parameters determines, size and sort order of returned array
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getPlanTest() throws ApiException {
        String planCode = null;
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        Long merchantId = null;
        RecurringPlanListResponse response = api.getPlan(planCode, count, orderOn, orderBy, page, filter, merchantId);

        // TODO: test validations
    }
    
    /**
     * Get Subscription by Subscription ID
     *
     * Gets details of a subscription.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubscriptionTest() throws ApiException {
        Long subscriptionId = null;
        Long merchantId = null;
        SubscriptionResponse response = api.getSubscription(subscriptionId, merchantId);

        // TODO: test validations
    }
    
    /**
     * Get transactions by Subscription ID
     *
     * Gets all transactions for a subscription. Optional parameters will help filter and restrict the result. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void getSubscriptionTransactionsTest() throws ApiException {
        Long subscriptionId = null;
        Integer count = null;
        String orderOn = null;
        String orderBy = null;
        Integer page = null;
        String filter = null;
        Long merchantId = null;
        TransactionListResponse response = api.getSubscriptionTransactions(subscriptionId, count, orderOn, orderBy, page, filter, merchantId);

        // TODO: test validations
    }
    
    /**
     * Pause a Subscription
     *
     * Pauses an active subscription. Recurring payments will be skipped when a subscription is paused. Only active subscriptions can be paused. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void pauseSubscriptionTest() throws ApiException {
        Long subscriptionId = null;
        PauseSubscriptionRequest body = null;
        SubscriptionResponse response = api.pauseSubscription(subscriptionId, body);

        // TODO: test validations
    }
    
    /**
     * Resume a Subscription
     *
     * Resumes a suspended or paused subscription. When a suspended subscription is resumed, Qualpay’s subscription engine will initiate all the missed subscription transactions. When a paused subscription is resumed, all missed payments are skipped. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void resumeSubscriptionTest() throws ApiException {
        Long subscriptionId = null;
        ResumeSubscriptionRequest body = null;
        SubscriptionResponse response = api.resumeSubscription(subscriptionId, body);

        // TODO: test validations
    }
    
    /**
     * Update a Recurring Plan
     *
     * Update an active recurring plan. Only the fields sent in the request body will be updated. Only an active plan can be updated. If there are subscribers to this plan, then this plan will be archived and a copy of the plan with a new plan_id will be generated. All updates will be made on the new plan. Save the new plan_id to manage a plan
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updatePlanTest() throws ApiException {
        String planCode = null;
        UpdateRecurringPlanRequest body = null;
        RecurringPlanResponse response = api.updatePlan(planCode, body);

        // TODO: test validations
    }
    
    /**
     * Update a Subscription
     *
     * Updates the start date of an existing subscription. Only subscriptions that has not yet started can be updated. Only start date can be updated. 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void updateSubscriptionTest() throws ApiException {
        Long subscriptionId = null;
        UpdateSubscriptionRequest body = null;
        SubscriptionResponse response = api.updateSubscription(subscriptionId, body);

        // TODO: test validations
    }
    
}
