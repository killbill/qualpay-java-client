/*
 * Qualpay Platform API
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import qpPlatform.ApiCallback;
import qpPlatform.ApiClient;
import qpPlatform.ApiException;
import qpPlatform.ApiResponse;
import qpPlatform.Configuration;
import qpPlatform.Pair;
import qpPlatform.ProgressRequestBody;
import qpPlatform.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.CheckoutLinkResponse;
import io.swagger.client.model.CheckoutRequest;
import io.swagger.client.model.CheckoutResponse;
import io.swagger.client.model.QPApiResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class QualpayCheckoutApi {
    private ApiClient apiClient;

    public QualpayCheckoutApi() {
        this(Configuration.getDefaultApiClient());
    }

    public QualpayCheckoutApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for addCheckout
     * @param body Checkout Resource (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call addCheckoutCall(CheckoutRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/checkout";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call addCheckoutValidateBeforeCall(CheckoutRequest body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'body' is set
        if (body == null) {
            throw new ApiException("Missing the required parameter 'body' when calling addCheckout(Async)");
        }
        

        com.squareup.okhttp.Call call = addCheckoutCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create a Checkout Payment Link
     * Creates a new checkout object which contains a payment link, through which checkout payments can be made. This operation generates a unique checkout_id, that can be used to query the status of a checkout payment using the Lookup Checkout Payment API.
     * @param body Checkout Resource (required)
     * @return CheckoutLinkResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CheckoutLinkResponse addCheckout(CheckoutRequest body) throws ApiException {
        ApiResponse<CheckoutLinkResponse> resp = addCheckoutWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create a Checkout Payment Link
     * Creates a new checkout object which contains a payment link, through which checkout payments can be made. This operation generates a unique checkout_id, that can be used to query the status of a checkout payment using the Lookup Checkout Payment API.
     * @param body Checkout Resource (required)
     * @return ApiResponse&lt;CheckoutLinkResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CheckoutLinkResponse> addCheckoutWithHttpInfo(CheckoutRequest body) throws ApiException {
        com.squareup.okhttp.Call call = addCheckoutValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<CheckoutLinkResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create a Checkout Payment Link (asynchronously)
     * Creates a new checkout object which contains a payment link, through which checkout payments can be made. This operation generates a unique checkout_id, that can be used to query the status of a checkout payment using the Lookup Checkout Payment API.
     * @param body Checkout Resource (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call addCheckoutAsync(CheckoutRequest body, final ApiCallback<CheckoutLinkResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = addCheckoutValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CheckoutLinkResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for getDetails
     * @param checkoutId Checkout ID (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call getDetailsCall(String checkoutId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/checkout/{checkoutId}"
            .replaceAll("\\{" + "checkoutId" + "\\}", apiClient.escapeString(checkoutId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call getDetailsValidateBeforeCall(String checkoutId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'checkoutId' is set
        if (checkoutId == null) {
            throw new ApiException("Missing the required parameter 'checkoutId' when calling getDetails(Async)");
        }
        

        com.squareup.okhttp.Call call = getDetailsCall(checkoutId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Lookup Checkout Payment
     * Queries the status of a payment made through Qualpay Hosted Checkout. The operation returns a checkout object which contains information about the transaction.
     * @param checkoutId Checkout ID (required)
     * @return CheckoutResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public CheckoutResponse getDetails(String checkoutId) throws ApiException {
        ApiResponse<CheckoutResponse> resp = getDetailsWithHttpInfo(checkoutId);
        return resp.getData();
    }

    /**
     * Lookup Checkout Payment
     * Queries the status of a payment made through Qualpay Hosted Checkout. The operation returns a checkout object which contains information about the transaction.
     * @param checkoutId Checkout ID (required)
     * @return ApiResponse&lt;CheckoutResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<CheckoutResponse> getDetailsWithHttpInfo(String checkoutId) throws ApiException {
        com.squareup.okhttp.Call call = getDetailsValidateBeforeCall(checkoutId, null, null);
        Type localVarReturnType = new TypeToken<CheckoutResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Lookup Checkout Payment (asynchronously)
     * Queries the status of a payment made through Qualpay Hosted Checkout. The operation returns a checkout object which contains information about the transaction.
     * @param checkoutId Checkout ID (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call getDetailsAsync(String checkoutId, final ApiCallback<CheckoutResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = getDetailsValidateBeforeCall(checkoutId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<CheckoutResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
