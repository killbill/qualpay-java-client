/*
 * Qualpay Platform API
 * This document describes the Qualpay Platform API.
 *
 * OpenAPI spec version: 1.1.9
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * StatementPlanData
 */

public class StatementPlanData {
  @SerializedName("rec_id_linked")
  private Long recIdLinked = null;

  @SerializedName("merchant_id")
  private Long merchantId = null;

  @SerializedName("billing_month")
  private String billingMonth = null;

  @SerializedName("plan_code")
  private String planCode = null;

  @SerializedName("cnt_purch")
  private Long cntPurch = null;

  @SerializedName("amt_purch")
  private Double amtPurch = null;

  @SerializedName("cnt_return")
  private Long cntReturn = null;

  @SerializedName("amt_return")
  private Double amtReturn = null;

  @SerializedName("amt_net")
  private Double amtNet = null;

  @SerializedName("amt_avg_ticket")
  private Double amtAvgTicket = null;

  @SerializedName("per_item")
  private Double perItem = null;

  @SerializedName("rate")
  private Double rate = null;

  @SerializedName("discount_due")
  private Double discountDue = null;

  public StatementPlanData recIdLinked(Long recIdLinked) {
    this.recIdLinked = recIdLinked;
    return this;
  }

   /**
   * For INTERNAL USE ONLY.
   * @return recIdLinked
  **/
  @ApiModelProperty(example = "0", value = "For INTERNAL USE ONLY.")
  public Long getRecIdLinked() {
    return recIdLinked;
  }

  public void setRecIdLinked(Long recIdLinked) {
    this.recIdLinked = recIdLinked;
  }

  public StatementPlanData merchantId(Long merchantId) {
    this.merchantId = merchantId;
    return this;
  }

   /**
   * &lt;strong&gt;Format: &lt;/strong&gt;Variable length, up to 16 N&lt;br&gt;&lt;strong&gt;Description: &lt;/strong&gt;Unique ID assigned by Qualpay to a merchant.
   * @return merchantId
  **/
  @ApiModelProperty(example = "212000000001", value = "<strong>Format: </strong>Variable length, up to 16 N<br><strong>Description: </strong>Unique ID assigned by Qualpay to a merchant.")
  public Long getMerchantId() {
    return merchantId;
  }

  public void setMerchantId(Long merchantId) {
    this.merchantId = merchantId;
  }

  public StatementPlanData billingMonth(String billingMonth) {
    this.billingMonth = billingMonth;
    return this;
  }

   /**
   * Billing month of the statement in YYYY-MM-DD
   * @return billingMonth
  **/
  @ApiModelProperty(example = "2019-03-01", value = "Billing month of the statement in YYYY-MM-DD")
  public String getBillingMonth() {
    return billingMonth;
  }

  public void setBillingMonth(String billingMonth) {
    this.billingMonth = billingMonth;
  }

  public StatementPlanData planCode(String planCode) {
    this.planCode = planCode;
    return this;
  }

   /**
   * Defines the payment instrument type of Visa, MasterCard, American Express, or Discover.
   * @return planCode
  **/
  @ApiModelProperty(example = "VS", value = "Defines the payment instrument type of Visa, MasterCard, American Express, or Discover.")
  public String getPlanCode() {
    return planCode;
  }

  public void setPlanCode(String planCode) {
    this.planCode = planCode;
  }

  public StatementPlanData cntPurch(Long cntPurch) {
    this.cntPurch = cntPurch;
    return this;
  }

   /**
   * The total funded sales transactions count.
   * @return cntPurch
  **/
  @ApiModelProperty(example = "10.10", value = "The total funded sales transactions count.")
  public Long getCntPurch() {
    return cntPurch;
  }

  public void setCntPurch(Long cntPurch) {
    this.cntPurch = cntPurch;
  }

  public StatementPlanData amtPurch(Double amtPurch) {
    this.amtPurch = amtPurch;
    return this;
  }

   /**
   * The total funded sales dollar amount.
   * @return amtPurch
  **/
  @ApiModelProperty(example = "100.0", value = "The total funded sales dollar amount.")
  public Double getAmtPurch() {
    return amtPurch;
  }

  public void setAmtPurch(Double amtPurch) {
    this.amtPurch = amtPurch;
  }

  public StatementPlanData cntReturn(Long cntReturn) {
    this.cntReturn = cntReturn;
    return this;
  }

   /**
   * The total funded credit transactions count.
   * @return cntReturn
  **/
  @ApiModelProperty(example = "10.10", value = "The total funded credit transactions count.")
  public Long getCntReturn() {
    return cntReturn;
  }

  public void setCntReturn(Long cntReturn) {
    this.cntReturn = cntReturn;
  }

  public StatementPlanData amtReturn(Double amtReturn) {
    this.amtReturn = amtReturn;
    return this;
  }

   /**
   * The total funded credit dollar amount.
   * @return amtReturn
  **/
  @ApiModelProperty(example = "100.0", value = "The total funded credit dollar amount.")
  public Double getAmtReturn() {
    return amtReturn;
  }

  public void setAmtReturn(Double amtReturn) {
    this.amtReturn = amtReturn;
  }

  public StatementPlanData amtNet(Double amtNet) {
    this.amtNet = amtNet;
    return this;
  }

   /**
   * The net dollar amount of transactions.
   * @return amtNet
  **/
  @ApiModelProperty(example = "100.0", value = "The net dollar amount of transactions.")
  public Double getAmtNet() {
    return amtNet;
  }

  public void setAmtNet(Double amtNet) {
    this.amtNet = amtNet;
  }

  public StatementPlanData amtAvgTicket(Double amtAvgTicket) {
    this.amtAvgTicket = amtAvgTicket;
    return this;
  }

   /**
   * Average ticket amount.
   * @return amtAvgTicket
  **/
  @ApiModelProperty(example = "10.0", value = "Average ticket amount.")
  public Double getAmtAvgTicket() {
    return amtAvgTicket;
  }

  public void setAmtAvgTicket(Double amtAvgTicket) {
    this.amtAvgTicket = amtAvgTicket;
  }

  public StatementPlanData perItem(Double perItem) {
    this.perItem = perItem;
    return this;
  }

   /**
   * The per item rate for the payment type.
   * @return perItem
  **/
  @ApiModelProperty(example = "10.0", value = "The per item rate for the payment type.")
  public Double getPerItem() {
    return perItem;
  }

  public void setPerItem(Double perItem) {
    this.perItem = perItem;
  }

  public StatementPlanData rate(Double rate) {
    this.rate = rate;
    return this;
  }

   /**
   * The discount rate for the payment type is applied to the Sales Amount.
   * @return rate
  **/
  @ApiModelProperty(example = "0.1", value = "The discount rate for the payment type is applied to the Sales Amount.")
  public Double getRate() {
    return rate;
  }

  public void setRate(Double rate) {
    this.rate = rate;
  }

  public StatementPlanData discountDue(Double discountDue) {
    this.discountDue = discountDue;
    return this;
  }

   /**
   * The Amount of discount due
   * @return discountDue
  **/
  @ApiModelProperty(example = "10.0", value = "The Amount of discount due")
  public Double getDiscountDue() {
    return discountDue;
  }

  public void setDiscountDue(Double discountDue) {
    this.discountDue = discountDue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StatementPlanData statementPlanData = (StatementPlanData) o;
    return Objects.equals(this.recIdLinked, statementPlanData.recIdLinked) &&
        Objects.equals(this.merchantId, statementPlanData.merchantId) &&
        Objects.equals(this.billingMonth, statementPlanData.billingMonth) &&
        Objects.equals(this.planCode, statementPlanData.planCode) &&
        Objects.equals(this.cntPurch, statementPlanData.cntPurch) &&
        Objects.equals(this.amtPurch, statementPlanData.amtPurch) &&
        Objects.equals(this.cntReturn, statementPlanData.cntReturn) &&
        Objects.equals(this.amtReturn, statementPlanData.amtReturn) &&
        Objects.equals(this.amtNet, statementPlanData.amtNet) &&
        Objects.equals(this.amtAvgTicket, statementPlanData.amtAvgTicket) &&
        Objects.equals(this.perItem, statementPlanData.perItem) &&
        Objects.equals(this.rate, statementPlanData.rate) &&
        Objects.equals(this.discountDue, statementPlanData.discountDue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(recIdLinked, merchantId, billingMonth, planCode, cntPurch, amtPurch, cntReturn, amtReturn, amtNet, amtAvgTicket, perItem, rate, discountDue);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StatementPlanData {\n");
    
    sb.append("    recIdLinked: ").append(toIndentedString(recIdLinked)).append("\n");
    sb.append("    merchantId: ").append(toIndentedString(merchantId)).append("\n");
    sb.append("    billingMonth: ").append(toIndentedString(billingMonth)).append("\n");
    sb.append("    planCode: ").append(toIndentedString(planCode)).append("\n");
    sb.append("    cntPurch: ").append(toIndentedString(cntPurch)).append("\n");
    sb.append("    amtPurch: ").append(toIndentedString(amtPurch)).append("\n");
    sb.append("    cntReturn: ").append(toIndentedString(cntReturn)).append("\n");
    sb.append("    amtReturn: ").append(toIndentedString(amtReturn)).append("\n");
    sb.append("    amtNet: ").append(toIndentedString(amtNet)).append("\n");
    sb.append("    amtAvgTicket: ").append(toIndentedString(amtAvgTicket)).append("\n");
    sb.append("    perItem: ").append(toIndentedString(perItem)).append("\n");
    sb.append("    rate: ").append(toIndentedString(rate)).append("\n");
    sb.append("    discountDue: ").append(toIndentedString(discountDue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

